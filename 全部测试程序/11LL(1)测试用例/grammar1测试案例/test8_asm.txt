assume cs:code,ds:data,ss:stack,es:extended

extended segment
	db 1024 dup (0)
extended ends

stack segment
	db 1024 dup (0)
stack ends

data segment
	_buff_p db 256 dup (24h)
	_buff_s db 256 dup (0)
	_msg_p db 0ah,'Output:',0
	_msg_s db 0ah,'Input:',0
	_T0 dw 0
	_N dw 0
	_T1 dw 0
	_M dw 0
	_T2 dw 0
	_T3 dw 0
	_T4 dw 0
	_T5 dw 0
	_T6 dw 0
	_a dw 0
data ends

code segment
start:	mov ax,extended
	mov es,ax
	mov ax,stack
	mov ss,ax
	mov sp,1024
	mov bp,sp
	mov ax,data
	mov ds,ax



_0:	CALL read
	MOV ds:[_T0],AX
_1:	MOV AX,ds:[_T0]
	MOV ds:[_N],AX
_2:	CALL read
	MOV ds:[_T1],AX
_3:	MOV AX,ds:[_T1]
	MOV ds:[_M],AX
_4:	MOV AX,ds:[_M]
	PUSH AX
_5:	MOV AX,ds:[_N]
	PUSH AX
_6:	CALL max
	MOV _T2,AX
_7:	MOV AX,_T2
	PUSH AX
_8:	MOV AX,100
	PUSH AX
_9:	CALL sum
	MOV ds:[_T3],AX
_10:	MOV AX,ds:[_T3]
	MOV ds:[_a],AX
_11:	MOV AX,ds:[_a]
	PUSH AX
_12:	CALL write
	MOV _T4,AX
quit:	mov ah,4ch
	int 21h
sum:	PUSH BP
	MOV BP,SP
	SUB SP,2
_15:	MOV AX,ss:[bp+6]
	ADD AX,ss:[bp+4]
	MOV _T5,AX
_16:	MOV AX,_T5
	MOV ss:[bp-2],AX
_17:	MOV AX,ss:[bp-2]
	MOV SP,BP
	POP BP
	RET 
max:	PUSH BP
	MOV BP,SP
	SUB SP,2
_19:	MOV DX,1
	MOV AX,ss:[bp+6]
	CMP AX,ss:[bp+4]
	JNB _GE_19
	MOV DX,0
_GE_19:	MOV _T6,DX
_20:	MOV AX,_T6
	CMP AX,0
	JNE _NE_20
	JMP far ptr _23
_NE_20:	NOP
_21:	MOV AX,ss:[bp+6]
	MOV ss:[bp-2],AX
_22:	JMP far ptr _24
_23:	MOV AX,ss:[bp+4]
	MOV ss:[bp-2],AX
_24:	MOV AX,ss:[bp-2]
	MOV SP,BP
	POP BP
	RET 


read:	push bp
	mov bp,sp
	mov bx,offset _msg_s
	call _print
	mov bx,offset _buff_s
	mov di,0
_r_lp_1:	mov ah,1
	int 21h
	cmp al,0dh
	je _r_brk_1
	mov ds:[bx+di],al
	inc di
	jmp short _r_lp_1
_r_brk_1:	mov ah,2
	mov dl,0ah
	int 21h
	mov ax,0
	mov si,0
	mov cx,10
_r_lp_2:	mov dl,ds:[bx+si]
	cmp dl,30h
	jb _r_brk_2
	cmp dl,39h
	ja _r_brk_2
	sub dl,30h
	mov ds:[bx+si],dl
	mul cx
	mov dl,ds:[bx+si]
	mov dh,0
	add ax,dx
	inc si
	jmp short _r_lp_2
_r_brk_2:	mov cx,di
	mov si,0
_r_lp_3:	mov byte ptr ds:[bx+si],0
	loop _r_lp_3
	mov sp,bp
	pop bp
	ret

write:	push bp
	mov bp,sp
	mov bx,offset _msg_p
	call _print
	mov ax,ss:[bp+4]
	mov bx,10
	mov cx,0
_w_lp_1:	mov dx,0
	div bx
	push dx
	inc cx
	cmp ax,0
	jne _w_lp_1
	mov di ,offset _buff_p
_w_lp_2:	pop ax
	add ax,30h
	mov ds:[di],al
	inc di
	loop _w_lp_2
	mov dx,offset _buff_p
	mov ah,09h
	int 21h
	mov cx,di
	sub cx,offset _buff_p
	mov di,offset _buff_p
_w_lp_3:	mov al,24h
	mov ds:[di],al
	inc di
	loop _w_lp_3
	mov ax,di
	sub ax,offset _buff_p
	mov sp,bp
	pop bp
	ret 2
_print:	mov si,0
	mov di,offset _buff_p
_p_lp_1:	mov al,ds:[bx+si]
	cmp al,0
	je _p_brk_1
	mov ds:[di],al
	inc si
	inc di
	jmp short _p_lp_1
_p_brk_1:	mov dx,offset _buff_p
	mov ah,09h
	int 21h
	mov cx,si
	mov di,offset _buff_p
_p_lp_2:	mov al,24h
	mov ds:[di],al
	inc di
	loop _p_lp_2
	ret
code ends
end start